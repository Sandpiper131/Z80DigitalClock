;  Title: Z80 Digital Clock w/ Individually Addressable 6 Digit 7-Segment Display
;  Author: Luke LaCasse
;  Date: 3/21/20
;  Description: Z80 Digital Clock Code, initializes peripherals and then calculates, manupulates, and sends time data to the 7-Segment Clock Peripheral

#TARGET ROM
#CODE EEPROM, $0000, $0800

_ROM EQU $0000
_RAM EQU $1000
_8253 EQU $2000
_8255 EQU $3000

;Global Variables
SEC EQU $1000
MIN EQU $1001
HR EQU $1002

CHOUR EQU $24  ; MAX HOUR COUNT
CMIN EQU $60  ; MAX MIN COUNT
CSEC EQU $60  ; MAX SECOND COUNT


.org $0000
	
INIT:
	ld SP, _RAM + $0FFF
  ld A, $00  

	; CONFIGURE 8253
  ld HL, _8253 + $0003  ; 8253 Mode Word Register
  ld (HL), $34  ; Counter 0 Mode 2
  ld (HL), $74  ; Counter 1 Mode 2

  ; Divide 4Mhz Clock by 40000, 1/100s
  ld HL, _8253  ; Counter 0 Count Register
  ld (HL), $40  ; LSB
  ld (HL), $9C  ; MSB

	; Divide Counter 0 by 100, 1s Count, Connected to !NMI
  ld HL, _8253 + $0001  ; Counter 1 Count Register
  ld (HL), $64  ; LSB
  ld (HL), $00  ; MSB

	; Initialize 8255 Peripheral IO Controller
  ld HL, _8255 + $0003  ; 8255 Data Word Register
  ld (HL), $82  ; Set port A and C Output Mode 0, B Input Mode 0

	; START TIME
	ld HL, SEC
	ld (HL), $00

	ld HL, MIN
	ld (HL), $00
	
	ld HL, HR
	ld (HL), $00

LOOP:
	HALT
	jp LOOP


.org $0066

NMI:
;	ld SP, _RAM + $0FFF  ; Reset Stack 

	; Increment Seconds Counter
	ld HL, SEC  
	ld A, (HL)	; Load Seconds into A Register
	ADD A, $01
	DAA

	ld HL, SEC
	ld (HL), A	; Load Seconds back into memory

	ld B, CSEC
	cp B
	jp NC, MINCOUNT
	jp Z, MINCOUNT
	jp WR_DIS 

MINCOUNT:
	; Reset Seconds to 0
  ld HL, SEC
	ld (HL), $00

	ld HL, MIN
	ld A, (HL)
	ADD A, $01
	DAA
	ld (HL), A

	ld B, CMIN
	cp B
	jp NC, HRCOUNT
	jp Z, HRCOUNT
	jp WR_DIS 

HRCOUNT:
	; Reset Minutes to 0
	ld HL, MIN
	ld (HL), $00

	ld HL, HR
	ld A, (HL)
	ADD A, $01
	DAA
	ld (HL), A

	ld B, CHOUR 
	cp B
	jp NC, TERMINAL_COUNT
	jp Z, TERMINAL_COUNT
	jp WR_DIS

TERMINAL_COUNT:
	ld HL, HR
	ld (HL), $00
	jp WR_DIS
	

BUFFER_A:
	SET 7, A
	SET 6, A
	SET 5, A
	SET 4, A
	RET

SNIB:		; Shifts A by nibble
	RLCA
	RLCA
	RLCA
	RLCA
	RET

DISPLAY0:
	RES 7, A
	RES 6, A
	RES 5, A
	RES 4, A
	RET

DISPLAY1:
	RES 7, A
	RES 6, A
	RES 5, A
	SET 4, A
	RET

DISPLAY2:
	RES 7, A
	RES 6, A
	SET 5, A
	RES 4, A
	RET

DISPLAY3:
	RES 7, A
	RES 6, A
	SET 5, A
	SET 4, A
	RET

DISPLAY4:
	RES 7, A
	SET 6, A
	RES 5, A
	RES 4, A
	RET

DISPLAY5:
	RES 7, A
	SET 6, A
	RES 5, A
	SET 4, A
	RET


; ########################
; ## Write Acc to PORTA ##
; ########################

PORTA:
	ld HL, _8255
	ld (HL), A
	RET


; #########################################
; ## Write Sec, Min, and HR to 7-Segment ##
; #########################################

WR_DIS:
	ld HL, SEC
	ld A, (HL)	; Load Seconds into A Register
	CALL DISPLAY5
	ld B, A  ; Move Display 0 Data into B Register
	ld A, (HL)
	CALL SNIB	 ; Shift A 4 bits, for Display 1 Data
	CALL DISPLAY4
	CALL PORTA
	CALL BUFFER_A
	CALL PORTA
	ld A, B
	CALL PORTA
	CALL BUFFER_A
	CALL PORTA	

	ld HL, MIN 
	ld A, (HL)	; Load Seconds into A Register
	CALL DISPLAY3
	ld B, A  ; Move Display 0 Data into B Register
	ld A, (HL)
	CALL SNIB	 ; Shift A 4 bits, for Display 1 Data
	CALL DISPLAY2
	CALL PORTA
	CALL BUFFER_A
	CALL PORTA
	ld A, B
	CALL PORTA
	CALL BUFFER_A
	CALL PORTA	

  ld HL, HR 
	ld A, (HL)	; Load Seconds into A Register
	CALL DISPLAY1
	ld B, A  ; Move Display 0 Data into B Register
	ld A, (HL)
	CALL SNIB	 ; Shift A 4 bits, for Display 1 Data
	CALL DISPLAY0
	CALL PORTA
	CALL BUFFER_A
	CALL PORTA
	ld A, B
	CALL PORTA
	CALL BUFFER_A
	CALL PORTA	

	RETN

end
